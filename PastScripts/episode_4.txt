A1 - Intro

{HUTCH}
Welcome to the Mixer Dev Show - the show where us developers jam out to the latest and greatest of developing for Mixer.

{MIKE}
That's right! Whether you're a game developer, web developer, or not a developer at all this is the show to learn about how you can build awesome interactions into streams and games on Mixer.

{HUTCH}
I'm Hutch

{MIKE}
and I'm Mike

{HUTCH}
Every week we're going to be coming at you live with the latest in the world of Mixer developers

{MIKE}
But that's not all. Every week we'll bring new tutorials and samples to help you get the most out of Mixer and interactive

{HUTCH}
And we'll always be working in little secrets and pro tips directly from the developers to help you up your skills

{MIKE}
And all of you watching live will have the opportunity to help shape our show and our samples, plus ask questions directly to the Mixer team. You can also tweet at us with the hashtag #MixerDevShow to talk about content, tips, or samples that you'd like to see in the show.

{HUTCH}
And if you're a developer and you're adding interactive to your game, tool, or something completely different be sure to drop us a line and we might just feature you on the show!

{MIKE}
We have alot to cover today, starting with an overview to one of our favorite MixPlay original games: Deaths Door!

{HUTCH}
After that we're going to provide a platform overview of custom controls, what they are, and how they work. We'll then finish up by spending some time getting friendly and familiar with the CDK or Control Development Kit.

{MIKE}
But before we get to that we want to know more about YOU! As we go into the next segment our awesome producer Tabz is going to pop up a poll where we've got a handful of questions to learn more about who's watching. It's multiple choice so just pick the option that you feel best represents you. If you don't see a great option for yourself then let us know in chat!

{HUTCH}
We're going to run this survey every week to understand who's out there, and use that to help pick better and more interesting samples for YOU, our favorite developers.

{MIKE}
With that, take it away with the news Hutch.

A2 - Opening Poll

Sample Questions:
How would you describe yourself?
    - Hobbyist game developer
    - Professional game developer
    - Hobbyist web developer
    - Professional web developer
    - Interested in development
    - Just a fan of Mixer

Have you developed for Mixer before?
    - Yes
    - No

What are you most interested in learning about?
    - Building tools
    - Building games
    - Something else?

What language or environment do you have the most experience with?
    - Javascript
    - Unity
    - Unreal
    - Other

 - News: Deaths Door

(Segment Header: Interactive News)

{MIKE}
Since we've been talking a lot about custom controls, we thought in this week's news we'd talk to you about the launch of an awesome new custom control on our MixPlay Original game, Death's Door. 

{HUTCH}
If you haven't seen Death's Door before, it's an interactive RPG where the community votes on what actions to take as they make their way through a post-apocalyptic world. Every choice from what item to buy, where to go, and how to engage in combat is chosen by the viewers. 

{MIKE}
Last week, developer Shiny Shoe added what they call an IPE or individual player experience using custom controls. The new IPE allows each player to have a customized view of their own inventory of minis which are little characters from the Death's Door universe. Players collect and level up the minis for use in raids with the rest of the community. Defeating raid bosses grants chests which contain even more collectible minis. As part of the latest update, players now get coins for casting votes which they can use to pay for mini upgrades.

{HUTCH}
What I like about the IPE is that it gives players more individual agency, while at the same time giving them incentives to come back day to day. It also recognizes viewers for their investment in the community, the more you play and vote, the more you contribute to raids and the higher your level.  Shiny Shoe leveraged the Mixer API in addition to custom controls to provide more chest slots to followers and subscribers. We'll cover the Mixer API in future episodes, but this is a nice intro to some of the data you get on your viewers so you can tailor the experience just for them. Check out Death's Door and start collecting minis at mixer.com/DeathsDoorGame.

 - Custom Controls Overview

(Segment Header: Custom Controls Overview)

{MIKE}
Welcome back! Today we'll be giving an overview of custom controls. Last week on the dev show we showed a sample to give you an idea of what you can accomplish. This week we're going to be taking a step back and talking high level about custom controls, what they are, how they work, and some of the basics of building them. If you're brand new to custom controls then you're definitely in the right place. 

{HUTCH}
That's right. We're going to start by recapping how MixPlay interactivity on Mixer works. We'll then go over what custom controls actually are and how they integrate with interactive and get rendered on Mixer. After that we'll walk through the CDK, or Control Development Kit, which is a tool from Mixer to help you develop your own custom controls.

{MIKE}
With that, let's get right into it and recap how MixPlay works.

(Show MixPlay Interactive Architecture)

Our MixPlay architecture utilizes web sockets to communicate between a game and its viewers, allowing us to achieve low-latency communication over the internet. The architecture consists of 4 parts; a game client, the interactive service, an interactive project, and participants (viewers).

{HUTCH}
In our first episode we covered how data flows through interactive, and if you haven't seen it I'd highly recommend taking a look by going to dev.mixer.com and clicking on the dev show heading. In summary, data flows between the game client and the participants, or viewers, through Mixer. The game client is an application that you write that manages all state and generally runs on a streamers computer.

{MIKE}
Now if you're using vanilla MixPlay, without custom controls, the presentation of the interactive UI is handled by Mixer through standard components like Buttons, Joysticks, Text Labels, etc... But the standard components are not flexible enough for every use case. Custom controls allow you to use the exact same interactive protocol, but have complete control over the experience that your players see.

(Pull down MixPlay Interactive Architecture)

{HUTCH}
Now that's one of the most important things to understand going in - custom controls use the SAME interactive protocol as regular interactive games - so if you've already built an interactive game but want to do more customization of the UI it will likely be pretty straightforward.

{MIKE}
Exactly - we use the same protocol, so the controls are really only there to build custom UI. You do that using standard HTML, javascript, and CSS, which is all rendered above the video on Mixer.

{HUTCH}
Okay, let's talk about exactly what that means. First off, when we say above the video we mean stacked above the video in the 'Z' direction.

(Show CustomControlsLayers.png)

If we look at the layers stack up on Mixer, at the bottom layer you'll have the Mixer UI. Above that we render the video. Now your controls are actually rendered above that. This allows you to fill any space on the Mixer stage, and even cover the video if you choose. The one thing to keep in mind though is that there is one element that gets rendered above your custom control - which is the Mixer video controls. These controls take up about 80 pixels of space measured from the bottom of the video, so that's something to keep in mind when you're designing a UI - you shouldn't put anything interactable in this region because it won't work!

It's also worth keeping in mind that Mixer exposes an API to actually move the video around. This allows your controls to render themselves above, below, or to either side of the video without having to actually cover the video.

{MIKE}
Technically your custom controls are rendered within an iframe and act like their own webpage inside Mixer. This is actually really powerful because it allows you to use ANY web technology while building a custom control. In general, anything you can accomplish in a browser can be accomplished in a custom control.

{riff on using different web technologies}
	External libraries
	Custom images and fonts
	HTML5 functionality or complete HTML5 games
	GOAL for today: pull the curtains back from any black magic on what goes into controls.

{MIKE}
Now Hutch you mentioned a moment ago that we use the same underlying protocol as interactive. But, custom controls also are able to fully leverage some extensions of the Mixer protocol to pass custom data up to your control running on a viewer's device. This allows you to display or act on more contextual information, to the point of building an experience that is deeply customized for every single viewer. 

{Bring up Mike's computer, look at interactive state set on a participant object and the broadcast message}
	• Bring up MixPlay protocol on dev site
	• Talk about RPC and method calls/replies
	• Go to the participant object
	• Copy it from the site into a blank vscode window
	• Create a custom property on the participant object and explain the benefits of stateful
	• Open a new window in vscode
	• Go back to protocol
	• Go to broadcastEvent
	• Talk about broadcast event, and use it to send custom data
	• Use case for broadcastEvent: you want to use an RPC model or give the client a way to load in optional data from the game
	• Compare/contrast
	• Usually want to use state but broadcastEvent can be useful

{MIKE}
And that's our overview of custom controls. Next up, we're going to take a look at the CDK.

 - Introduction to the CDK

(Segment Header: Introduction to the Control Development Kit)

{HUTCH}
Let's talk about the CDK or Control Development Kit. This is one of the main tools you'll need if you're developing a custom control for Mixer. Today we're going to walk you through the basics of creating a custom control project, what type of project to choose, and how you can go about making simple edits to that project.

{MIKE}
We'll then walk through how you can build your project and inspect what's being created and uploaded to Mixer in case you run into any issues. Along the way we'll talk through how you can include other things into your custom control like other scripts or images. We'll then finish up with tying your custom control to a game client and running it on Mixer.

{HUTCH}
The first thing we're going to do is create a simple HTML project in the CDK.

(Walk through project create - select HTML)
	• Talk through what the installer is doing
	• Open the project in VSCode
	• Open index.html
	• Point out the "Hello World" button and compare to what you see in the CDK

{MIKE}
Now lets look at scripts.js
	• Open scripts.js
	• Point out moveVideo()
	• Point out isLoaded()
	• Point out giveInput()

{HUTCH}
Now let's switch back to the CDK because I want to talk about some of the cool features that it supports. The first one is live reloads when you make a change to one of your source files. To demonstrate, let's go back to VSCode and make a simple change.

(Go back to vscode, make a simple change, switch back and note that it's applied)

{MIKE}
One of the other things that's super useful when you're building a custom controls is to click on the dev tools button. Because the CDK is an electron app, which is basically just running chrome, you have full access to the chrome dev tools to debug your applications.

(Open dev tools, inspect the element we added)

{HUTCH}
Another useful feature is the console, which allows you to see all of the method calls and replies that your control is making to the Mixer host.

{MIKE}
The last thing I want to get to before we talk about how custom controls are built and uploaded is the control schema pane on the left. This is the schema for controls that you've configured within Mixer. If you've played with a standard interactive project, without custom controls, you should be familiar with the idea that you can configure scenes, groups, and controls to manage your interactive project. This still exists with custom controls and this pane allows you to save the schema that you have configured for your controls. This schema is required if you want to create controls that cost sparks to use, and is also a useful way to configure your code if you choose to use it. If you're using an HTML project this is completely optional.

{HUTCH}
Now, let's talk about builds. When you build and upload your custom control bundle the CDK compiles your sources and uploads them to Mixer. It does this using a tool called webpack.

	• Open webpack.config.js
	• Don't go in depth, but mention that this file is what describes how we build that
	• Compare to other build systems - e.g. visual studio, cmake, etc...
	• Open the `build` folder and describe how the folder is filled
	• then later zipped up and uploaded
	• Discuss that if you're including items and you're getting 404s to look here
	• Now lets test it out by including an image in our custom control
	• Add image to src folder
	• Reference it in index.html
	• See that it works in CDK
	• Build and upload
	• Note that the image is now showing up in the build directory
	• Include jquery as well
	• Reference it within scripts.js
	• Note that it works

{MIKE}
So in summary, the CDK is the tool in Mixer that allows you to create, build, and iterate on custom control projects. The CDK itself provides utilities to debug and inspect your controls, and is able to build and upload your controls to Mixer for use on real streams. But there's one step we haven't done - connect it to your game!

For our last step we're going to setup a game client that turns on the custom control.

(Chat Poll - Unity or NodeJs?)

(Start up a game client, connect it to Mixer, run it, and see our custom control)

(Evaluate time and decide to use the inputControl sample)

A6 - Outro

Thanks for tuning into another segment of the Mixer Dev Show.  Be sure to tune in every Wednesday at 1pm PT / 4pm ET for more info like this every week.

If you want to get more information about what we showed here today, you can check out the vods here on Mixer, read more on our BRAND NEW DEV SITE , or visit our youtube channel at WatchMixer.

While you're at it, why not go ahead and get started building some experiences of your own by visiting the Mixer Dev Lab at .

And be sure to tune in next week right here on mixer.com/MixerDevShow

And of course, follow Mixer on all the socials at @WatchMixer and more dev goodness with #MixerDevShow, and if you haven't already be sure that you've clicked that blue follow button right below the stream.

{riff on whatever}

As always to end our show, we'll be promoting the amazing content that's already out there and we'll continue this week with supporting the documentary series "Dev Quest", a four part series taking a look at developers around the world and the things that they build. We'll preview the first 2 minutes of the second episode, so you'll have to go over to the "Windows Developer" channel on youtube to keep watching on the "Dev Quest" playlist. 

That's all from us! Good day and Happy coding!

